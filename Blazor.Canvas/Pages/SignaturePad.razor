@page "/SignaturePad"
@inject IJSRuntime JS
@using Blazor.Canvas.Model.Models
<div>
    <canvas width="300" height="200" id="theCanvas"
        style="border: 1px solid red;"
    ></canvas>
</div>
<hr />
<div>
    <button type="button" class="button" @onclick="UndoClickAsync">Undo</button>
    <button type="button" class="button" @onclick="RedoClickAsync">Redo</button>
    <button type="button" class="button" @onclick="ClearClickAsync">Clear</button>
    <button type="button" class="button" @onclick="SaveClickAsync">Save</button>
    <input type="range" max="5" min="0.1" step="0.1" @bind="@Thickness" @bind:event="oninput" @bind:after="ChangeThicknessAsync" />
    <input type="color" @bind="@Color" @bind:event="oninput" @bind:after="ChangeColorAsync" />
</div>
<hr />
@code {
    private string ImageData { get; set; } = string.Empty;
    private double Thickness { get; set; } = 0.1;
    private string Color { get; set; } = string.Empty;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await JS.InvokeAsync<object>("blSignaturePad", "theCanvas");
        }
    }

    private async void ClearClickAsync()
    {
        await JS.InvokeAsync<object>("blClearButton");
    }
    private async void SaveClickAsync()
    {
        var a = await JS.InvokeAsync<object>("blToData");
        var videoSQLiteRepositoryAsync = new NoteSQLiteRepositoryAsync();
        Note b = new()
            {
                Id = (await videoSQLiteRepositoryAsync.GetMaxIdAsync()) + 1,
                Title = "title",
                CreatedBy = "creator",
                Url = "123",
            };
        await videoSQLiteRepositoryAsync.AddAsync(b);
        await JS.InvokeAsync<object>("blClearButton");
    }
    private async void UndoClickAsync()
    {
        await JS.InvokeAsync<object>("blUndoButton");
    }
    private async void RedoClickAsync()
    {
        await JS.InvokeAsync<object>("blRedoButton");
    }
    private async void ChangeColorAsync()
    {
        await JS.InvokeAsync<object>("blChangeColor", Color);
    }
    private async void ChangeThicknessAsync()
    {
        await JS.InvokeAsync<object>("blChangeThickness", Thickness);
    }
}
